---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import BlogPost from '../../../layouts/es/ES_BlogPost.astro';
import { calculateReadingTimeFromHtml } from '../../../lib/reading';

export async function getStaticPaths() {
	const posts = await getCollection('es');
	return posts.map((post) => ({
		params: { slug: post.id },
		props: post,
	}));
}
type Props = CollectionEntry<'es'>;

const post = Astro.props;
const posts = await getCollection('es');
// Sort by date descending for navigation
const sorted = posts.slice().sort((a, b) => +b.data.pubDate - +a.data.pubDate);
const index = sorted.findIndex((p) => p.id === post.id);
const prev = index < sorted.length - 1 ? { id: sorted[index + 1].id, title: sorted[index + 1].data.title } : null;
const next = index > 0 ? { id: sorted[index - 1].id, title: sorted[index - 1].data.title } : null;

const { Content } = await render(post);
const html = await Astro.slots.render('default');
const readingTimeMin = calculateReadingTimeFromHtml(html ?? '');
---

<BlogPost {...post.data} prevPost={prev} nextPost={next}>
  <Content />
</BlogPost>
